- @page_title = "#{Bananajour.config.name}&rsquo;s Bananajour"

- if @repositories.empty?

  %style{:type => "text/css"}
    :sass
      h2, pre
        :margin-left 14px
    
  %h2 Add a project
  
  %pre
    :preserve
      $ cd ~/code/myproj
      $ bananajour init
      #{Bananajour.plain_init_success_message('myproj.git')}
      $ git push banana master
      Counting objects: 3, done.
      Writing objects: 100% (3/3), 229 bytes, done.
      Total 3 (delta 0), reused 3 (delta 0)
      Unpacking objects: 100% (3/3), done.
      To #{Bananajour.repositories_path.expand_path}/myproj.git
       * [new branch]      master -> master
      
- else

  %style{:type => "text/css"}
    :sass
      p.toc
        :float right
        :width 70%
        :text-align right
        :margin-top -30px
        :font-size 14px
        :opacity 0.5
        
        a
          :color #000
          :font-weight bold
      
      .people
        :font-size 14px
        a
          :color black
      
      .repository
        :clear both
        :background-color white
        :-webkit-border-radius 10px
        :-moz-border-radius 10px
        :padding 7px 10px
        :margin 10px 0
        :position relative
        :border 4px solid #ff0
        
        .readme
          :position absolute
          :top 0
          :right 10px
          :font-size 12px
          a
            :color #888
        
        h2
          :margin 0 0 5px 0
          :color #333
          :font-size 24px
        
        h3
          :font-size 12px
          :color #666
          :margin 5px 0
          
        span.uri
          :margin 5px 0
          :font-size 14px
          :color #888
          :font-weight normal
          
        p.heads, p.network
          :display inline
          :font-size 12px
          :margin 5px 0
          strong
            :font-weight bold
          &, a
            :color #888
          
        p.heads
          :margin-right 10px
        
        ul, li
          :margin 0
          :padding 0
          :list-style none
        
        a.toggle_commits
          :position absolute
          :top 10
          :right 10px
          :font-size 12px
          :color #888
        
        ul.commits
          :width 100%
          :margin-top 5px
          :display none
        
        ul.commits li
          :font-size 12px
          :line-height 1.5em
          :padding 8px 0
          :border 0px solid #ddd
          :border-top-width 1px
          
          em.branch
            :float right
            :display block
            :font-size 11px
            :background-color #e5e5e5
            :color #666
            :padding 2px 5px
            :margin-left 3px
            :margin-top -3px
            :font-weight normal
            :font-style normal
          
          p
            :margin 0
            :line-height 1em
            / :margin-left 40px
            
          p.message
            :line-height 1.4em

          span.meta
            :font-size 10px
            :color #999
            :line-height 1.5em
    

  - if @repositories.length > 1
    %p.toc
      Repos:
      - for repository in @repositories
        %a{:href => "##{repository.dirname}"}&= repository.name
  
  %h2 Local Repos
  
  :javascript
    function toggleCommitsForRepo(repository_id) {
      var commits = $("#" + repository_id + " ul.commits");
      var link = commits.siblings(".toggle_commits");
      commits.toggle();
      commits.is(":visible") ? link.text("- Commits") : link.text("+ Commits")
    }

  - for repository in @repositories
    - repository_id = repository.dirname.gsub(/[^A-Za-z]+/, '')
    .repository{:id => repository_id}

      - if repository.readme_file
        %p.readme
          %a{:href => "/#{repository.name}/readme"} Readme
    
      %h2
        %span.name&= repository.name
        %span.uri
          &= repository.uri
          
      %p.heads
        %strong Published branches:
        - repository.grit_repo.heads.collect {|h| h.name}.each_with_index do |branch, i|
          = ",&nbsp;" unless i == 0
          %span>&= branch

      %p.network
        %strong Other network copies:
        - if (network_repositories = repository.similar_network_repositories(@network_repositories)).empty?
          none
        - for nr in network_repositories
          %a{:href => "#{nr.bananajour.uri}##{nr.name}.git"}= nr.bananajour.name

      %a.toggle_commits{:href => "#", :onclick => "toggleCommitsForRepo(\"#{repository_id}\");"} + Commits

      %ul.commits
        - for commit in repository.recent_commits
          %li
            - if head = commit.head(repository.grit_repo)
              %em.branch= head.name
            %p.message
              &= commit.short_message
              %span.meta
                \~
                &= time_ago_in_words(commit.committed_date).gsub("about ","")
                ago by
                &= commit.author
                \-
                &= commit.id_abbrev
                
  %h2 Remote Repos
  
  - distinct_network_repositories = repository.distinct_network_repositories(@network_repositories)
  - for repo_name in distinct_network_repositories.map { |dnr| dnr.name }.uniq.sort
    .repository
    
      %h2
        %span.name&= repo_name
        
      %p.network
        - for nr in distinct_network_repositories.select { |dnr| dnr.name == repo_name }
          %a{:href => "#{nr.bananajour.uri}##{nr.name}.git"}= nr.bananajour.name
  
  .people
    %p
      Other Bananas:
      = Bananajour.other_people.map { |p| "<a href='#{p.uri}'>#{p.name}</a>" }.join(', ')
