- @page_title = "#{Bananajour.config.name}&rsquo;s Bananajour"

- if @repositories.empty?

  %style{:type => "text/css"}
    :sass
      h2, pre
        :margin-left 14px
    
  %h2 Add a project
  
  %pre
    :preserve
      $ cd ~/code/myproj
      $ bananajour init
      #{Bananajour.plain_init_success_message('myproj.git')}
      $ git push banana master
      Counting objects: 3, done.
      Writing objects: 100% (3/3), 229 bytes, done.
      Total 3 (delta 0), reused 3 (delta 0)
      Unpacking objects: 100% (3/3), done.
      To #{Bananajour.repositories_path.expand_path}/myproj.git
       * [new branch]      master -> master
      
- else

  %style{:type => "text/css"}
    :sass
      ul.toc
        :float right
        :font-size 14px
        :line-height 1.3
        :margin -30px 0 0.3em 13em
        :opacity 0.5
        :text-align right
        :width auto
          
      ul.toc li
        :display inline
        :list-style-type none
         
        a
          :color #000
          :font-weight 700
      
      .people
        :font-size 14px
        a
          :color black
        
      .repository
        :clear both
        :background-color white
        :-webkit-border-radius 10px
        :-moz-border-radius 10px
        :padding 7px 10px
        :margin 10px 0
        :position relative
        :border 4px solid #f1592a
        
        .readme
          :position absolute
          :top 0
          :right 10px
          :font-size 12px
          a
            :color #888
        
        h2
          :margin 0 0 5px 0
          :color #333
          :font-size 24px
        
        h3
          :font-size 12px
          :color #666
          :margin 5px 0
          
        span.uri
          :margin 5px 0
          :font-size 14px
          :color #888
          :font-weight normal
          
        p.heads, p.network
          :display inline
          :font-size 12px
          :margin 5px 0
          strong
            :font-weight bold
          &, a
            :color #888
          
        p.heads
          :margin-right 10px
        
        ul, li
          :margin 0
          :padding 0
          :list-style none
        
        a.toggle_commits
          :position absolute
          :top 10
          :right 10px
          :font-size 12px
          :color #888
        
        ul.commits
          :width 100%
          :margin-top 5px
        
        ul.commits li
          :font-size 12px
          :line-height 1.5em
          :padding 8px 0
          :border 0px solid #ddd
          :border-top-width 1px
          
          em.branch
            :float right
            :display block
            :font-size 11px
            :background-color #e5e5e5
            :color #666
            :padding 2px 5px
            :margin-left 3px
            :margin-top -3px
            :font-weight normal
            :font-style normal
          
          p
            :margin 0
            :line-height 1em
            / :margin-left 40px
            
          p.message
            :line-height 1.4em

          span.meta
            :font-size 10px
            :color #999
            :line-height 1.5em
      
      #remotes
        :margin 20px 0 0 0
        .repository
          :border-color #ff0
      #remotes p.remote
        :color #c8ae08
        :font-size 1.6em
        :font-style italic
        :letter-spacing 8px
        :margin 0 auto 20px auto
        :text-align center
        /*:text-transform uppercase
        :width 50%

  - if @repositories.length > 1
    %ul.toc
      %li Repos:
      - for repository in @repositories
        %li.repo
          %a{:href => "##{repository.html_friendly_name}"}&= repository.name

  - for repository in @repositories
    - repository_id = repository.html_friendly_name
    .repository{:id => repository_id}

      - if repository.readme_file
        %p.readme
          %a{:href => "/#{repository.name}/readme"} Readme
    
      %h2
        %span.name&= repository.name
        %span.uri
          &= repository.uri
          
      %p.heads
        %strong Published branches:
        - repository.grit_repo.heads.collect {|h| h.name}.each_with_index do |branch, i|
          = ",&nbsp;" unless i == 0
          %span>&= branch

      %p.network
        %strong Other network copies:
        - if (network_repositories = Bananajour::Bonjour.network_repositories_similar_to(repository)).empty?
          none
        - for nr in network_repositories
          %a{:href => "#{nr.bananajour.uri}##{nr.name}.git"}= nr.bananajour.name

      - if local?
        %a.toggle_commits{:href => "#"} + Commits

      %ul.commits{:style => ("display:none" if local?)}
        - for commit in repository.recent_commits
          %li
            - if head = commit.head(repository.grit_repo)
              %em.branch= head.name
            %p.message
              &= commit.short_message
              %span.meta
                \~
                &= time_ago_in_words(commit.committed_date).gsub("about ","")
                ago by
                &= commit.author
                \-
                &= commit.id_abbrev
  
  :javascript
    $('.repository .toggle_commits').click(function(event) {
      event.preventDefault();
      var link = $(this);
      var commits = link.parents('.repository').find('.commits');
      commits.toggle();
      commits.is(":visible") ? link.text("- Commits") : link.text("+ Commits");
    });
  
  - if local?  
    #remotes
      %p.remote Elsewhere
      - yet_uncloned_network_repositories = Bananajour::Bonjour.yet_uncloned_network_repositories
      - for repo_name in yet_uncloned_network_repositories.map { |dnr| dnr.name }.uniq.sort
        .repository
          %h2
            %span.name&= repo_name

          %p.network
            - for nr in yet_uncloned_network_repositories.select { |dnr| dnr.name == repo_name }
              %a{:href => "#{nr.bananajour.uri}##{nr.name}.git"}= nr.bananajour.name
  
  .people
    %p
      Banana Ring:
      = Bananajour.other_people.map { |p| "<a href='#{p.uri}'>#{p.name}</a>" }.join(', ')


  :javascript
    var getData = function() {
      $.getJSON("/index.json", function(data) {
        $.each(data.repositories, function(i) {
          $.getJSON("/" + data.repositories[i].name + ".json", function(repository) {
            ajaxUpdate(repository);
          });
        });
      });
    };

    var ajaxUpdate = function(repository) {
      $.each(repository.recent_commits, function(i) {
        var commit = repository.recent_commits[i];
        if (commit.head != null) {
          var headBranch = $("<em class=\"branch\"/>").append(commit.head);
        }
        var messagePara = $("<p class=\"message\"/>").append(commit.message);
        messagePara.append($("<span class=\"meta\"/>").append(" ~ " + commit.committed_date_pretty + " by " + commit.author.name + " - " + commit.id.substr(0, 7)));
        $($("#" + repository.html_friendly_name + " .commits").children()[i]).replaceWith($("<li/>").prepend(headBranch).append(messagePara));
      });      
    };

    // $(setInterval(getData, 9000));

